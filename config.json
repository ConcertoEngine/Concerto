{
  "assetPath": "./assets/",
  "GameName": "Concerto",
  "RenderingAPI": "Vulkan",
  "Shader" : "[nzsl_version(\"1.0\")]\nmodule;\n\noption red: bool = false;\n\n[layout(std140)]\nstruct Data\n{\n\tprojectionMatrix: mat4[f32],\n\tworldMatrix: mat4[f32],\n\tviewMatrix: mat4[f32]\n}\n\n[set(0)]\nexternal\n{\n\t[binding(0)] data: uniform[Data]\n}\n\n[set(1)]\nexternal\n{\n\t[binding(0)] tex: sampler2D[f32]\n}\n\nstruct VertIn\n{\n\t[location(0)] position: vec3[f32],\n\t[location(1)] normal: vec3[f32],\n\t[location(2)] uv: vec2[f32]\n}\n\nstruct VertOut\n{\n\t[builtin(position)] position: vec4[f32],\n\t[location(0)] normal: vec3[f32],\n\t[location(1)] uv: vec2[f32]\n}\n\nstruct FragOut\n{\n\t[location(0)] color: vec4[f32]\n}\n\n[entry(frag)]\nfn main(fragIn: VertOut) -> FragOut\n{\n\tlet lightDir = vec3[f32](0.0, 0.707, 0.707);\n\tlet lightFactor = dot(fragIn.normal, lightDir);\n\n\tlet fragOut: FragOut;\n\tfragOut.color = lightFactor * tex.Sample(fragIn.uv) * const_select(red, vec4[f32](1.0, 0.0, 0.0, 1.0), vec4[f32](1.0, 1.0, 1.0, 1.0));\n\n\treturn fragOut;\n}\n\n[entry(vert)]\nfn main(vertIn: VertIn) -> VertOut\n{\n\tlet vertOut: VertOut;\n\tvertOut.position = data.projectionMatrix * data.viewMatrix * data.worldMatrix * vec4[f32](vertIn.position, 1.0);\n\tvertOut.normal = vertIn.normal;\n\tvertOut.uv = vertIn.uv;\n\n\treturn vertOut;\n}\n)"
}